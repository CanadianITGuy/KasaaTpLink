<?php
/**
 * Generic Kasa Controller (PHP 8+ compatible)
 * Works without any specific framework
 */

class KasaController
{
    private string $email = "xxx";
    private string $password = "xxx!";
    private string $url = "https://use1-wap.tplinkcloud.com";
    private ?string $deviceId = null;

    /**
     * Call Kasa API
     */
    private function kasaApi(array $payload, ?string $token = null): ?array
    {
        $headers = ['Content-Type: application/json'];
        $fullUrl = $this->url . ($token ? "?token={$token}" : '');

        $ch = curl_init($fullUrl);
        curl_setopt_array($ch, [
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_HTTPHEADER => $headers,
            CURLOPT_POST => true,
            CURLOPT_POSTFIELDS => json_encode($payload),
            CURLOPT_SSL_VERIFYPEER => true,   // Better security
            CURLOPT_SSL_VERIFYHOST => 2,
        ]);

        $response = curl_exec($ch);
        if ($response === false) {
            curl_close($ch);
            return null;
        }

        curl_close($ch);
        return json_decode($response, true);
    }

    /**
     * Get authentication token
     */
    private function getToken(): ?string
    {
        $loginPayload = [
            "method" => "login",
            "params" => [
                "appType" => "Kasa_Android",
                "cloudUserName" => $this->email,
                "cloudPassword" => $this->password,
                "terminalUUID" => uniqid('', true),
            ],
        ];

        $login = $this->kasaApi($loginPayload);
        return $login['result']['token'] ?? null;
    }

    /**
     * Turn device ON
     */
    public function turnOn(): void
    {
        if (!$this->deviceId) {
            $this->listDevices();
        }

        $token = $this->getToken();
        if (!$token) {
            $this->jsonResponse(["error" => "Unable to get token"]);
        }

        $payload = [
            "method" => "passthrough",
            "params" => [
                "deviceId" => $this->deviceId,
                "requestData" => json_encode([
                    "system" => ["set_relay_state" => ["state" => 1]],
                ]),
            ],
        ];

        $result = $this->kasaApi($payload, $token);
        $this->jsonResponse([
            "message" => "Device turned ON successfully",
            "datetime" => date("Y-m-d H:i:s"),
            "result" => $result,
        ]);
    }

    /**
     * Turn device OFF
     */
    public function turnOff(): void
    {
        if (!$this->deviceId) {
            $this->listDevices();
        }

        $token = $this->getToken();
        if (!$token) {
            $this->jsonResponse(["error" => "Unable to get token"]);
        }

        $payload = [
            "method" => "passthrough",
            "params" => [
                "deviceId" => $this->deviceId,
                "requestData" => json_encode([
                    "system" => ["set_relay_state" => ["state" => 0]],
                ]),
            ],
        ];

        $result = $this->kasaApi($payload, $token);
        $this->jsonResponse([
            "message" => "Device turned OFF successfully",
            "datetime" => date("Y-m-d H:i:s"),
            "result" => $result,
        ]);
    }

    /**
     * List all devices
     */
    public function listDevices(): void
    {
        $token = $this->getToken();
        if (!$token) {
            $this->jsonResponse(["error" => "Unable to get token"]);
        }

        $list = $this->kasaApi(["method" => "getDeviceList"], $token);
        $this->jsonResponse($list ?? ["error" => "Failed to fetch devices"]);
    }

    /**
     * Send JSON response
     */
    private function jsonResponse(array $data): void
    {
        header('Content-Type: application/json');
        echo json_encode($data, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT);
        exit;
    }
}

// Router example
$action = $_GET['action'] ?? 'listDevices';
$controller = new KasaController();

if (method_exists($controller, $action)) {
    $controller->$action();
} else {
    $controller->listDevices();
}
